import numpy as np
import sys
import os

try:
    caffe_root = '/home/mmlab/caffe/'
except KeyError:
    raise KeyError("Define CAFFE_ROOT in ~/.bashrc")

sys.path.insert(1, caffe_root + 'python/')
import caffe
import cv2
from py_returnCAMmap import py_returnCAMmap
from py_map2jpg import py_map2jpg
import scipy.io


def im2double(im):
    return cv2.normalize(im.astype('float'), None, 0.0, 1.0, cv2.NORM_MINMAX)
def model_set(model='googlenet', weight_path='model/googlenetCAM_malware_iter_160000.caffemodel', model_path='model/deploy_googlenetCAM_malware.prototxt') :
    if model == 'googlenet':
        net_weights = weight_path
        net_model = model_path
        out_layer = 'CAM_fc'
        crop_size = 224
        last_conv = 'CAM_conv'
    else:
        raise Exception('This model is not defined')

    return net_weights, net_model, out_layer, crop_size, last_conv
def load_model(net_model, net_weights, device) :
    # load CAM model and extract features
    caffe.set_device(device)
    caffe.set_mode_gpu()
    net = caffe.Net(net_model, net_weights, caffe.TEST)
    return net
def load_image(path) :
    img = cv2.imread(path)
    return img
def cam_heatmap(net, filename, image, out_layer, crop_size, last_conv, virwhite) :
    transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
    transformer.set_transpose('data', (2, 0, 1))
    transformer.set_mean('data', np.load(caffe_root + 'python/caffe/imagenet/ilsvrc_2012_mean.npy').mean(1).mean(1))

    weights_LR = net.params[out_layer][0].data  # get the softmax layer of the network

    srcImg = image
    image = cv2.resize(image, (256, 256))

    # Take center crop.
    center = np.array(image.shape[:2]) / 2.0
    crop = np.tile(center, (1, 2))[0] + np.concatenate([
        -np.array([crop_size, crop_size]) / 2.0,
        np.array([crop_size, crop_size]) / 2.0
    ])
    crop = crop.astype(int)
    input_ = image[crop[0]:crop[2], crop[1]:crop[3], :]

    # extract conv features
    net.blobs['data'].reshape(*np.asarray([1, 3, crop_size, crop_size]))  # run only one image
    net.blobs['data'].data[...][0, :, :, :] = transformer.preprocess('data', input_)
    out = net.forward()
    scores = out['prob']
    activation_lastconv = net.blobs[last_conv].data


    topNum = 5  # generate heatmap for top X prediction results
    scoresMean = np.mean(scores, axis=0)
    ascending_order = np.argsort(scoresMean)
    IDX_category = ascending_order[::-1]  # [::-1] to sort in descending order

    curCAMmapAll = py_returnCAMmap(activation_lastconv, weights_LR[IDX_category[:topNum], :])

    curResult = im2double(image)

    curCAMmap_crops = curCAMmapAll[:, :, virwhite]
    curCAMmapLarge_crops = cv2.resize(curCAMmap_crops, (256, 256))
    curHeatMap = cv2.resize(im2double(curCAMmapLarge_crops), (256, 256))  # this line is not doing much
    curHeatMap = im2double(curHeatMap)

    curHeatMap = py_map2jpg(curHeatMap, None, 'jet')
    curHeatMap = cv2.resize(curHeatMap, (srcImg.shape[0], srcImg.shape[1]))
    curHeatMap[:, :, 0] = 0
    curHeatMap[:, :, 1] = 0

    cv2.imwrite('heatmap.jpg', curHeatMap)

    bbox_threshold = [20, 100, 110]  # parameters for the bbox generator
    curParaThreshold = str(bbox_threshold[0]) + ' ' + str(bbox_threshold[1]) + ' ' + str(bbox_threshold[2]) + ' '

    curBBoxFile = '/media/mmlab/hdd/MalwareDetector/CAM_ROI_Extractor/CAM_Python/bboxgenerator/heatmap_6.txt';

    os.system("/media/mmlab/hdd/MalwareDetector/CAM_ROI_Extractor/CAM_Python/bboxgenerator/./dt_box " + "heatmap.jpg" + ' ' + curParaThreshold + ' ' + curBBoxFile)

    with open(curBBoxFile) as f:
        for line in f:
            items = [int(x) for x in line.strip().split()]

    boxData1 = np.array(items[0::4]).T
    boxData2 = np.array(items[1::4]).T
    boxData3 = np.array(items[2::4]).T
    boxData4 = np.array(items[3::4]).T

    boxData_formulate = np.array([boxData1, boxData2, boxData1 + boxData3, boxData2 + boxData4]).T

    col1 = np.min(np.array([boxData_formulate[:, 0], boxData_formulate[:, 2]]), axis=0)
    col2 = np.min(np.array([boxData_formulate[:, 1], boxData_formulate[:, 3]]), axis=0)
    col3 = np.max(np.array([boxData_formulate[:, 0], boxData_formulate[:, 2]]), axis=0)
    col4 = np.max(np.array([boxData_formulate[:, 1], boxData_formulate[:, 3]]), axis=0)

    boxData_formulate = np.array([col1, col2, col3, col4]).T


    curHeatMap = im2double(curHeatMap)


    bbox_list = []
    im = cv2.imread(filename)
    for i in range(boxData_formulate.shape[0]):  # for each bbox
        bbox = [boxData_formulate[i][0], boxData_formulate[i][1], boxData_formulate[i][2], boxData_formulate[i][3]]
        bbox_list.append(bbox)

    return curHeatMap, bbox_list


def fwrite_xywh(roifile, bbox):
    rf = open(roifile, 'w')
    for nBox in range(len(bbox)):
        for j in range(len(bbox[nBox])):
            rf.write(str(bbox[nBox][j]) + "\t")
            rf.write("\n")
    rf.close()



def main() :
    weight = '/media/mmlab/hdd/MalwareDetector/data/models/snapshot/googlenetCAM_malware_iter_160000.caffemodel'
    model = '/media/mmlab/hdd/MalwareDetector/data/models/prototxt/deploy_malware_googlenetCAM.prototxt'
    ImgPath = '/home/mmlab/faster-rcnn/py-faster-rcnn/data/Malware_devkit/data/Images'
    roixmlPath = '/media/mmlab/hdd/MalwareDetector/data/Annotations/'

    net_weight, net_model, out_layer, crop_size, last_conv = model_set(model='googlenet', weight_path=weight, model_path=model)
    net = load_model(net_model, net_weight, 0)

    img_list = os.listdir(ImgPath)
    img_list.sort()

    start = 0
    end = len(img_list)

    print("input : "),
    start = input() - 1

    for i in range(start, end) :
        filename = os.path.join(ImgPath, img_list[i])
        print "-------------------------------------------------------------------------------------"
        print "%d/%d name : %s" %(i+1, end, filename)
        txt_name = img_list[i].split(".jpg")
        txt_file_path = str(roixmlPath + txt_name[0] + '.txt')

        image_virus = load_image(filename)
        image_white = load_image(filename)

        im_virus = cv2.imread(filename)
        im_white = cv2.imread(filename)
        image_size = image_virus.shape

        resize_shape = (600,600)
        ###################Extract Virus heatmap#####################
        heatmap1, bbox1 = cam_heatmap(net, filename, image_virus, out_layer, crop_size, last_conv, 0)

        for i in range(len(bbox1)) :
            x = int(bbox1[i][0])
            y = int(bbox1[i][1])
            w = int(bbox1[i][2] - bbox1[i][0])
            h = int(bbox1[i][3] - bbox1[i][1])

            cv2.rectangle(im_virus, (x, y), (x+w, y+h), (0,0,255), 2)
            cv2.rectangle(heatmap1, (x, y), (x + w, y + h), (0, 0, 255), 2)

            cv2.putText(im_virus, str(i+1), (x + 10, y + 28), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            cv2.putText(heatmap1, str(i+1), (x + 10, y + 28), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

        ###################Extract White heatmap#####################
        #heatmap2, bbox2 = cam_heatmap(net, filename, image_white, out_layer, crop_size, last_conv, 1)
        # for i in range(len(bbox2)):
        #     x = int(bbox2[i][0])
        #     y = int(bbox2[i][1])
        #     w = int(bbox2[i][2] - bbox2[i][0])
        #     h = int(bbox2[i][3] - bbox2[i][1])
        #
        #     cv2.rectangle(im_white, (x, y), (x + w, y + h), (0, 0, 255), 2)
        #     cv2.rectangle(heatmap2, (x, y), (x + w, y + h), (0, 0, 255), 2)
        #
        #     cv2.putText(im_white, str(i + 1), (x + 10, y + 28), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        #     cv2.putText(heatmap2, str(i + 1), (x + 10, y + 28), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

        im_virus_resize = cv2.resize(im_virus, resize_shape)
        cv2.imshow("virus", im_virus_resize)
        #cv2.waitKey(0)

        heatmap1_resize = cv2.resize(heatmap1, resize_shape)
        cv2.imshow("virus_heatmap", heatmap1_resize)
        cv2.waitKey(10)

        # im_white_resize = cv2.resize(im_white, resize_shape)
        # cv2.imshow("white", im_white_resize)
        # #cv2.waitKey(0)
        #
        # heatmap2_resize = cv2.resize(heatmap2, resize_shape)
        # cv2.imshow("white_heatmap", heatmap2_resize)
        # cv2.waitKey(10)

        inputs = []

        ###################Virus#####################
        bbox_virus = []
        print "Virus's # of box  : ", len(bbox1)
        for i in range(len(bbox1)) :
            print ("---Box %d--- True or False : " %(i + 1)),
            inp = input()
            inputs.append(inp)

            if int(inp) == 1 :
                bbox_virus.append(bbox1[i])

        print"\n"
        ###################White#####################
        # bbox_white = []
        # print "White's # of box : ", len(bbox2)
        # for i in range(len(bbox2)):
        #     print ("---Box %d--- True or False : " %(i + 1)),
        #     inp = input()
        #     inputs.append(inp)
        #
        #     if inp == 1 :
        #         bbox_white.append(bbox2[i])
        #
        # flag = 0
        for i in range(len(inputs)) :
            if inputs[i] == 1 :
                flag = 1

        if flag == 1 :
            imgfile = open(txt_file_path, 'w')

            imgfile.write("Image filename : " + img_list[i] + "\n")
            imgfile.write("Image size (X x Y x C) : " + str(image_size[0]) + " x " + str(image_size[1]) + " x " + str(
                image_size[2]) + "\n")
            imgfile.write("Database : \"Malware Database\"\n")
            #imgfile.write("Objects with ground truth : " + str(len(bbox_virus) + len(bbox_white)) + " { ")
            imgfile.write("Objects with ground truth : " + str(len(bbox_virus)) + " { ")
            for i in range(len(bbox_virus)):
                imgfile.write("\"malware\" ")

            # for i in range(len(bbox_white)):
            #     imgfile.write("\"white\" ")
            # imgfile.write("}\n\n")

            num = 1
            for i in range(len(bbox_virus)):
                imgfile.write("Original label for object " + str(num) + " \"malware\" : \"malware\"\n")
                imgfile.write("Center point on object " + str(num) + " \"malware\" (X, Y) : (" +
                              str(bbox_virus[i][0] + int((bbox_virus[i][2] - bbox_virus[i][0]) / 2)) + ", " +
                              str(bbox_virus[i][1] + int((bbox_virus[i][3] - bbox_virus[i][1]) / 2)) + ")\n")
                imgfile.write("Bounding box for object " + str(num) + " \"malware\" (Xmin, Ymin) - (Xmax, Ymax) : "
                                                                      "(" + str(bbox_virus[i][0]) + ", " + str(
                    bbox_virus[i][1]) + ") - (" + str(bbox_virus[i][2]) + ", " + str(bbox_virus[i][3]) + ")\n\n")
                num += 1

            # for i in range(len(bbox_white)):
            #     imgfile.write("Original label for object " + str(num) + " \"white\" : \"white\"\n")
            #     imgfile.write("Center point on object " + str(num) + " \"malware\" (X, Y) : (" +
            #                   str(bbox_white[i][0] + int((bbox_white[i][2] - bbox_white[i][0]) / 2)) + ", " +
            #                   str(bbox_white[i][1] + int((bbox_white[i][3] - bbox_white[i][1]) / 2)) + ")\n")
            #     imgfile.write("Bounding box for object " + str(num) + " \"malware\" (Xmin, Ymin) - (Xmax, Ymax) : "
            #                                                           "(" + str(bbox_white[i][0]) + ", " + str(
            #         bbox_white[i][1]) + ") - (" + str(bbox_white[i][2]) + ", " + str(bbox_white[i][3]) + ")\n\n")
            #     num += 1

            imgfile.close()
            print("\n\n\n")

        else :
            print("**********%s file is not generated ! ***********\n\n" %(img_list[i]))




if __name__ == "__main__" :
    main()
