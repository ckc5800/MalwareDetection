from xml.etree import ElementTree

import os
import cv2
from CAM_Python import cam_bbox_test as cam_bbox


def main() :
    weight = '/media/mmlab/hdd/MalwareDetector/data/models/snapshot/googlenetCAM_malware_iter_160000.caffemodel'
    model = '/media/mmlab/hdd/MalwareDetector/data/models/prototxt/deploy_malware_googlenetCAM.prototxt'
    ImgPath = '/home/mmlab/faster-rcnn/py-faster-rcnn/data/Malware_devkit/data/Images'
    roixmlPath = 'py_faster_rcnn/data/Annotations/'

    net_weight, net_model, out_layer, crop_size, last_conv = cam_bbox.model_set(model='googlenet', weight_path=weight, model_path=model)
    net = cam_bbox.load_model(net_model, net_weight, 0)

    img_list = ['malware_00001.jpg', 'malware_00007.jpg','malware_00116.jpg','malware_01763.jpg','malware_00454.jpg']
    #img_list.sort()

    start = 0
    end = len(img_list)
    for i in range(start, end) :
        print "%d/%d name : %s" %(i+1, end, img_list[i])
        xml_name = img_list[i].split(".jpg")
        xml_file_path = str(roixmlPath + xml_name[0] + '.xml')
        filename = os.path.join(ImgPath, img_list[i])

        image = cam_bbox.load_image(filename)
        image_size = image.shape

        heatmap_1, bbox_1  = cam_bbox.cam_heatmap(net, filename, image, out_layer, crop_size, last_conv, 0)
        #bbox_2, heatmap_2 = cam_bbox.cam_heatmap(net, filename, image, out_layer, crop_size, last_conv, 1)

        heatmap_1 = cv2.resize(heatmap_1, (600,600))
        cv2.imshow(img_list[i], heatmap_1)
        cv2.waitKey(0)


        # annotation = ElementTree.Element('annotation')
        # folder = ElementTree.Element('folder')
        # folder.text = 'roi_xml'
        # annotation.append(folder)
        #
        # filename = ElementTree.Element('filename')
        # filename.text = str(img_list[i])
        # annotation.append(filename)
        #
        # size = ElementTree.Element('size')
        # annotation.append(size)
        #
        # width = ElementTree.Element('width')
        # width.text = str(image_size[0])
        # height = ElementTree.Element('height')
        # height.text = str(image_size[1])
        # depth = ElementTree.Element('depth')
        # depth.text = str(image_size[2])
        # size.append(width)
        # size.append(height)
        # size.append(depth)
        #
        # for i in range(len(bbox_1)) :
        #     object = ElementTree.Element('object')
        #     annotation.append(object)
        #     name = ElementTree.Element('name')
        #     pose = ElementTree.Element('pose')
        #     truncated = ElementTree.Element('truncated')
        #     difficult = ElementTree.Element('difficult')
        #     bndbox = ElementTree.Element('bndbox')
        #
        #     name.text = 'malware'
        #     pose.text = 'Unspecified'
        #     truncated.text = 0
        #     difficult.text = 0
        #
        #     object.append(name)
        #     object.append(pose)
        #     object.append(truncated)
        #     object.append(difficult)
        #     object.append(bndbox)
        #
        #     xmin = ElementTree.Element('xmin')
        #     ymin = ElementTree.Element('ymin')
        #     xmax = ElementTree.Element('xmax')
        #     ymax = ElementTree.Element('ymax')
        #
        #     xmin.text = str(bbox_1[i][0])
        #     ymin.text = str(bbox_1[i][1])
        #     xmax.text = str(bbox_1[i][2])
        #     ymax.text = str(bbox_1[i][3])
        #
        #     bndbox.append(xmin)
        #     bndbox.append(ymin)
        #     bndbox.append(xmax)
        #     bndbox.append(ymax)
        #
        # for i in range(len(bbox_2)) :
        #     object = ElementTree.Element('object')
        #     annotation.append(object)
        #     name = ElementTree.Element('name')
        #     pose = ElementTree.Element('pose')
        #     truncated = ElementTree.Element('truncated')
        #     difficult = ElementTree.Element('difficult')
        #     bndbox = ElementTree.Element('bndbox')
        #
        #     name.text = 'white'
        #     pose.text = 'Unspecified'
        #     truncated.text = 0
        #     difficult.text = 0
        #
        #     object.append(name)
        #     object.append(pose)
        #     object.append(truncated)
        #     object.append(difficult)
        #     object.append(bndbox)
        #
        #     xmin = ElementTree.Element('xmin')
        #     ymin = ElementTree.Element('ymin')
        #     xmax = ElementTree.Element('xmax')
        #     ymax = ElementTree.Element('ymax')
        #
        #     xmin.text = str(bbox_2[i][0])
        #     ymin.text = str(bbox_2[i][1])
        #     xmax.text = str(bbox_2[i][2])
        #     ymax.text = str(bbox_2[i][3])
        #
        #     bndbox.append(xmin)
        #     bndbox.append(ymin)
        #     bndbox.append(xmax)
        #     bndbox.append(ymax)
        #
        # ElementTree.ElementTree(annotation).write(xml_file_path)

if __name__ == "__main__" :
    main()
